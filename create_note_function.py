# Grade 1. Этап 3: Задание 1 (Функции)
# Функция создания заметки - create_note() - функция для создания новой заметки и возврата словаря.
# Функция позволяет вводить данные о заметке
# Проверяет введенные данные и следующие условия:
# Заголовок заметки не может быть пустым.
# - В случае ввода пустого заголовка - окончание ввода заметки и запрос на необходимость ввода следующей заметки
# Вносит текущую дату в заметку как дату её начала (ввода)
# Проверяет, чтобы дата окончания заметки была >= текущей даты и соответствовала установленному формату (дд-мм-гггг)
# Предлагает пользователю выбрать статус заметки из списка установленных статусов (по номеру статуса или его наименованиб)
# - проверяет корректность введенного статуса заметки
# В заключении программа выводит введенный список заметок (словарей) - функция out_note()

# Функция ввода заметки
def create_note():
    global note1
    # нахождение текушей даты (даты создания заметки)
    from datetime import datetime
    today = datetime.today()
    created_date = today.strftime('%d-%m-%Y')
    print(f'Вы моэжете добавить новую заметку. Заметка № {new}:')
    end = True
    while True:
        title = input(f"Введите заголовок заметки (для завершения ввода оставьте поле пустым (нажмите Enter) или наберите стоп): ")
        if title == "" or title.lower() == "стоп" or title.lower() == "stop":
            end = False
            print(f'Ввод информации о заметке прекращен.')
        break
    if end == True:
        username = input('Имя пользователя: ')
        content = input('Описание заметки: ')
        # Выбор статуса заметки из списка статусов
        while True:
            # Ввод  значения/номера статуса заметки
            print(f'Введите информацию о текушем статусе заметки, \n выбрав номер статуса (целое число от 1 до {len(statuses)}) или его наименование: ')
            print('Выберите номер статуса заметки: ')
            print(f'Статус №1: {statuses[1]}')
            print(f'Статус №2: {statuses[2]}')
            print(f'Статус №3: {statuses[3]}')
            print(f'Статус №4: {statuses[4]}')
            print(f'Статус №5: {statuses[5]}')
            # Ввод пользователем номера статуса заметки: i - номер статуса заметки
            stat_tmp = input('Установить заметке Статус ')
            # Проверка не ввел ли пользователь значение статуса вместо его номера (с учетом, что статусы набраны в верхнем регистре)
            if stat_tmp.lower() in spis:
                status = stat_tmp.lower()
                break
            else:
                # Проверка корректности выбора статуса заметки
                # проверяем  корректность введенного номера/наименования статуса. В случае некорректности ввода - запрос на повторный ввод номера статуса
                dd = stat_tmp.isdigit()
                while dd == False:
                    print(f'Введено не корректное значение номера или наименования статуса заметки: {stat_tmp}.\nДолжно вводиться целое число от 1 до {len(statuses)} или наименование статуса из списка.')
                    stat_tmp = input('Введите номер или наименование статуса заметки: ')
                    if stat_tmp.lower() in spis:
                        break
                    else:
                        dd = stat_tmp.isdigit()
                        if dd == True and 1 <= int(stat_tmp) <= len(statuses):
                            stat_tmp = int(stat_tmp)
                            break
                        else:
                            dd = False
                    continue
                if stat_tmp.lower() in spis:
                    status = stat_tmp.lower()
                    break
                else:
                    status = statuses[int(stat_tmp)]
                    break
        # Ввод даты истечения заметки - issue_date - и проверка её корректности
        from datetime import datetime
        while True:
            try:
                tnp_date = datetime.strptime(input(f'Введите дату окончания заметки (дд-мм-гггг): '), '%d-%m-%Y')
            except ValueError:
                print('Введено неверное значение даты. Дата должна быть в формате (дд-мм-гггг)/')
            else:
                date_tmp = tnp_date.strftime("%d-%m-%Y")
                if today > tnp_date:
                    tmp_period = today - tnp_date
                    period = tmp_period.days
                    print(f'Сегодня {today.strftime('%d-%m-%Y')}. \nДата окончания заметки прошла {period} дней назад.')
                    print(f'Дата окончания заметки не может быть раньше сегоднящнего дня! Введите корректную дату окончания заметки.')
                    continue
                break
        # проверка истечения срока завершения события/заметки в настоящее время и информирование пользователя о сроках окончания
        if today < tnp_date:
            tmp_period = tnp_date - today
            period = tmp_period.days + 1
            print(f'Сегодня {today.strftime('%d-%m-%Y')}. До даты окончания заметки осталось: {period} дней.')
        elif today.day == tnp_date.day and today.month == tnp_date.month and today.year == tnp_date.year:
            print(f'Сегодня {today.strftime('%d-%m-%Y')}. Дата окончания заметки сегодня. ')
        issue_date = date_tmp
        # дополнение списка введенными данными
        note1 = {
            'ID':new,
            'Пользователь': username,
            'Описание': content,
            'Статус': status,
            'Дата создания': created_date,
            'Дата истечения': issue_date,
            'Заголовок': title
        }
    return note1

# вывод информации из списка словарей на экран
def out_note(note):
    if len(note) == 0:
        print('\nСписок заметок пустой.')
    else:
        for i in range(len(note)):
            print(f'Заметка № {note[i]['ID']} : ')
            print(f'Имя пользователя: {note[i]['Пользователь']} ')
            print(f'Заголовок : {note[i]['Заголовок']} ')
            print(f'Описание: {note[i]['Описание']} ')
            print(f'Статус: {note[i]['Статус']} ')
            print(f'Дата создания (дд-мм-гггг): {note[i]['Дата создания']} ')
            print(f'Заметка актуальна до (дд-мм-гггг): {note[i]['Дата истечения']} ')

    return


note = note1 = []
new = 1
# Список возможных корректных ответов на вопрос
change_stat = ['yes', 'no', 'y', 'n', 'да', 'нет', 'д', 'н', 'Yes', 'No', 'Y', 'N', 'Да', 'Нет', 'Д', 'Н', 'YES', 'NO', 'ДА', 'НЕТ']
change = ''
# Словарь возможных статусов заметки
statuses = {
    1: 'новая',
    2: 'получена',
    3: 'в работе',
    4: 'отложена',
    5: 'выполнена',
}
# Список возможных статусов заметки
spis = list(statuses.values())
end = True
# Ввод нескольких заметок (Менеджер заметок)
print('Добро пожаловать в "Менеджер заметок"!')
while True:
    note1 = create_note()
    if len(note1) != 0:
        note.append(note1)
        note1 = []
    else:
        new -= 1
    change = input(f'Хотите добавить ещё одну заметку? Если да - введите: "да"(д) или "yes" (y).\n Если нет - введите:"нет"(н) или "no"(n) или оставьте поле пустым (нажмите Enter): ')
    if change == '':
        print('\nВвод информации окончен.')
        break
    else:
        while not (change in change_stat):
            print(f'Введено не корректное значение. Возможен один из перечисленных ответов на вопрос:  {change_stat}')
            change = input(f'Хотите добавить ещё одну заметку? Если да - введите: "да"(д) или "yes" (y).\n Если нет - введите:"нет"(н) или "no"(n) или оставьте поле пустым (нажмите Enter): ')
            if change == '':
                print('\nВвод информации окончен.')
                break
            else: continue
        if change in change_stat[::2]:
            new += 1
        else:
            break
# вывод итоговой информации из списка словарей на экран
if len(note) == 0:
    print('Список заметок пустой.')
else:
    print('\nВведены следующие сведения о заметках:')
    out_note(note)

